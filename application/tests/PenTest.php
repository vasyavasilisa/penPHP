<?php

use Application\Pen;
use PHPUnit\Framework\TestCase;

/**
 * Class PenTest
 */
class PenTest extends TestCase
{
    private static $DEFAUL_CONTEINER = 100;
    private static $DEFAULT_SIZE = 20.0;
    private static $COLOR_FIELD = "red";
    private static $DEFAULT_WORD = "qwerty";

    /**
     * @dataProvider colorProvider
     */
    public function testGetRightColor($key, $expectedColor)
    {
        $pen = Pen::createPenWithSizeLetterAndColor(self::$DEFAUL_CONTEINER, self::$DEFAULT_SIZE, $expectedColor);
        $this->assertEquals($expectedColor, $pen->getColor());
    }

    /**
     * @dataProvider colorProvider
     */
    public function testDoSomethingElse($key, $expectedColor)
    {
        $pen = Pen::createPenWithSizeLetterAndColor(self::$DEFAUL_CONTEINER, self::$DEFAULT_SIZE, $expectedColor);
        $this->expectOutputString($expectedColor);
        $pen->doSomethingElse();
    }

    public function testIsWorkPenShouldWork()
    {
        $pen = new Pen(self::$DEFAUL_CONTEINER);
        $this->assertTrue($pen->isWork(), "Pen must work but it doesn't work");
    }

    /**
     * @dataProvider containerValueNegProvider
     */
    public function testIsWorkPenShouldNotWork($ink)
    {
        $pen = new Pen($ink);
        $this->assertFalse($pen->isWork(), "Pen must not work but it works");
    }

    /**
     * @dataProvider wordsProvider
     */
    public function testWritePenShouldWorkAfterWrite($key, $word)
    {
        $pen = Pen::createPenWithSizeLetter(self::$DEFAUL_CONTEINER, self::$DEFAULT_SIZE);
        $pen->write($word);
        $this->assertTrue($pen->isWork(), "Pen doesn't work after writting");
    }

    /**
     * @dataProvider longWordsProvider
     */
    public function testWritePenShouldNotWorkAfterWrite($key, $word)
    {
        $pen = Pen::createPenWithSizeLetter(self::$DEFAUL_CONTEINER, self::$DEFAULT_SIZE);
        $pen->write($word);
        $this->assertFalse($pen->isWork(), "Pen works after writting by all ink");
    }

    /**
     * @dataProvider getWordsProvider
     */
    public function testWriteGetFullWrittWord($word)
    {
        $pen = Pen::createPenWithSizeLetter(self::$DEFAUL_CONTEINER, self::$DEFAULT_SIZE);
        $this->assertEquals($word, $pen->write($word), "The word " . $word . " was not written fully");
    }

    /**
     * @dataProvider containerValueNegProvider
     */
    public function testWriteGetEmptyWhenNoInk($ink)
    {
        $pen = Pen::createPenWithSizeLetter($ink, self::$DEFAULT_SIZE);
        $this->assertEmpty($pen->write(self::$DEFAULT_WORD), "Pen writes without ink");
    }

    /**
     * @dataProvider inkSizeProvider
     */
    public function testWriteGetWrittPartOfWord($ink, $size)
    {
        $pen = Pen::createPenWithSizeLetter($ink, $size);
        $this->assertEquals(substr(self::$DEFAULT_WORD, 0, $ink / $size), $pen->write(self::$DEFAULT_WORD), "Pen writes incorrect part of word by available ink");
    }

    public function testConstructorShouldCreateInstance()
    {
        $pen = new Pen (self::$DEFAUL_CONTEINER);
        $this->assertInstanceOf(Pen::class, $pen, "Conscructor creates not an instance of " . Pen::class);
        $this->assertObjectHasAttribute('inkContainerValue', $pen, "Object has no attribute inkContainerValue");
    }

    public function testCreatePenWithSizeLetter()
    {
        $pen = Pen::createPenWithSizeLetter(self::$DEFAUL_CONTEINER, self::$DEFAULT_SIZE);
        $this->assertInstanceOf(Pen::class, $pen, "Method creates not an instance of " . Pen::class);
    }

    public function testCreatePenWithSizeLetterAndColor()
    {
        $pen = Pen::createPenWithSizeLetterAndColor(self::$DEFAUL_CONTEINER, self::$DEFAULT_SIZE, self::$COLOR_FIELD);
        $this->assertInstanceOf(Pen::class, $pen, "Method creates not an instance of " . Pen::class);
    }

    /**
     * @dataProvider constructorProvider
     */
    public function testConstructorShouldSetAttribute($attribute)
    {
        $pen = new Pen (self::$DEFAUL_CONTEINER);
        $this->assertObjectHasAttribute($attribute, $pen, "Object has no attribute inkContainerValue");
    }

    /**
     * @dataProvider inkSizeAttributesProvider
     */
    public function testCreatePenWithSizeSetAttributes($attribute)
    {
        $pen = Pen::createPenWithSizeLetter(self::$DEFAUL_CONTEINER, self::$DEFAULT_SIZE);
        $this->assertObjectHasAttribute($attribute, $pen, "Object has no attribute " . $attribute);
    }

    /**
     * @dataProvider inkSizeColorAttributesProvider
     */
    public function testCreatePenWithSizeAndColorSetAttributes($attribute)
    {
        $pen = Pen::createPenWithSizeLetterAndColor(self::$DEFAUL_CONTEINER, self::$DEFAULT_SIZE, self::$COLOR_FIELD);
        $this->assertObjectHasAttribute($attribute, $pen, "Object has no attribute " . $attribute);
    }

    /**
     * @dataProvider inkSizeNegativeProvider
     */
    public function testCreatePenWithSizeLetterNegative($ink, $size)
    {
        $pen = Pen::createPenWithSizeLetter($ink, $size);
        $this->assertNotInstanceOf(Pen::class, $pen, "Constructor creates instance of " . Pen::class);
    }

    public
    function colorProvider()
    {
        return [

            [0, "BLUE"],
            [1, "RED"],
            [2, "YELLOW"]
        ];
    }

    public
    function containerValueNegProvider()
    {
        return [
            "zero" => [0]
        ];
    }

    public
    function wordsProvider()
    {
        return [
            [0, "qwer"],
            [1, "q ert"],
            [2, " wert"],
            [3, "qwer "],
            [4, "     "]
        ];
    }

    public
    function longWordsProvider()
    {
        return [
            [0, "qwert"],
            [1, "qwerty"]
        ];
    }

    public
    function getWordsProvider()
    {
        return [
            "positive" => ["qwer"],
            "boundary" => ["qwert"],
        ];
    }

    public
    function inkSizeProvider()
    {
        return [
            [4, 2],
            [10, 2.5],
            [8.8, 2],
            [8.8, 2.3],
        ];
    }

    public
    function inkSizeNegativeProvider()
    {
        return [
            "zero size" => [1000, 0],
            "negative size" => [1000, -1],
            "negative ink and size" => [-1000, -1],
            "strings ink and size" => ["qwert", "qwert"],
        ];
    }

    public
    function constructorProvider()
    {
        return [
            "ink field name" => ["inkContainerValue"]
        ];
    }

    public
    function inkSizeAttributesProvider()
    {
        $fields = self::constructorProvider();
        $fields["size field name"][] = "sizeLetter";
        return $fields;
    }

    public
    function inkSizeColorAttributesProvider()
    {
        $fields = self::inkSizeAttributesProvider();
        $fields["color field name"][] = "color";
        return $fields;
    }
}
